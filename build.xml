<?xml version="1.0" encoding="UTF-8"?>

<!--
This build.xml is experimental.
It also likely requires the associated "javaCompiler...args" file generated by Eclipse.
These are used to build the SeleniumPlus PlugIn via an Ant script outside of Eclipse.
However, since the build does have Eclipse Ant Task dependencies, it must be run 
via a special invocation of Java using the Eclipse AntRunner application.
A sample invocation of this which appears to work for me (CANAGL) is:

java -DSAFSJARS="pathTo/safsjars" 
     -DECLIPSEJARS="pathTo/eclipse/plugins"
     -jar "pathTo\eclipse\plugins\org.eclipse.equinox.launcher_1.3.0.v20130327-1440.jar"
     -application org.eclipse.ant.core.antRunner 
     -buildfile build.xml build.update.jar
     
The above command was executed from the command-line using this build.xml location 
as the working directory.
-->

<project name="Seleniumplus_plugin" default="build.jars" basedir=".">
	<property name="eclipsePlugins" value="${ECLIPSEJARS}"/>
	
	<property name="buildDirectory" value="${basedir}/bin"/>
	<property name="testBuildDirectory" value="${basedir}/testBuild"/>
	<property name="testClassesDir" value="${testBuildDirectory}/classes" />
	<property name="p2.build.repo" value="file:${buildDirectory}/buildRepo"/>
	<property name="basews" value="${ws}"/>
	<property name="baseos" value="${os}"/>
	<property name="basearch" value="${arch}"/>
	<property name="basenl" value="${nl}"/>
	<property name="bundleId" value="Seleniumplus_plugin"/>
	<property name="bundleVersion" value="1.0.0.201312102336"/>
	<property name="p2.publishonerror" value="false"/>

	<!-- Compiler settings. -->
	<property name="javacFailOnError" value="true"/>
	<property name="javacDebugInfo" value="on"/>
	<property name="javacVerbose" value="true"/>
	<property name="logExtension" value=".log"/>
	<property name="compilerArg" value=""/>
	<property name="compilation.prereq.log" value="${buildDirectory}/prereqErrors.log"/>
	<property name="javacSource" value="1.6"/>
	<property name="javacTarget" value="1.6"/>
	<condition property="dir_bootclasspath" value="${java.home}/../Classes">
		<and>
			<os family="mac"/>
			<available file="${java.home}/../Classes" type="dir"/>
		</and>
	</condition>
	<property name="dir_bootclasspath" value="${java.home}/lib"/>
	<path id="path_bootclasspath">
		<fileset dir="${dir_bootclasspath}">
			<include name="*.jar"/>
		</fileset>
	</path>
	<property name="bootclasspath" refid="path_bootclasspath"/>
	<condition property="bundleBootClasspath" value="${JavaSE-1.6}"	>
		<isset property="JavaSE-1.6"/>
	</condition>
	<condition property="bundleJavacSource" value="1.6"	>
		<isset property="JavaSE-1.6"/>
	</condition>
	<condition property="bundleJavacTarget" value="1.6"	>
		<isset property="JavaSE-1.6"/>
	</condition>
	<property name="bundleJavacSource" value="${javacSource}"/>
	<property name="bundleJavacTarget" value="${javacTarget}"/>
	<property name="bundleBootClasspath" value="${bootclasspath}"/>

	<target name="init" depends="properties">
		<condition property="pluginTemp" value="${buildTempFolder}/plugins"		>
			<isset property="buildTempFolder"/>
		</condition>
		<property name="pluginTemp" value="${basedir}"/>
		<condition property="build.result.folder" value="${pluginTemp}/Seleniumplus_plugin_1.0.0.201312102336"		>
			<isset property="buildTempFolder"/>
		</condition>
		<property name="build.result.folder" value="${buildDirectory}"/>
		<property name="temp.folder" value="${basedir}/temp.folder"/>
		<property name="plugin.destination" value="${SAFSJARS}"/>
		<condition property="p2.publish.parts" value="true"		>
			<istrue value="${p2.gathering}"/>
		</condition>
		<property name="compilation.problem.marker" value="${build.result.folder}/compilation.problem"/>
		<condition property="compilation.problem.marker.exists" value="true"		>
			<and>
			<available file="${compilation.problem.marker}"/>
			<isfalse value="${p2.publishonerror}"/>
			</and>
		</condition>
	</target>

	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
	</target>

	<target name="build.update.jar" depends="init" description="Build the plug-in: Seleniumplus_plugin for an update site.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<jar destfile="${plugin.destination}/Seleniumplus_plugin_1.0.0.201312102336.jar" basedir="${temp.folder}/Seleniumplus_plugin_1.0.0.201312102336" filesetmanifest="merge"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="@dot.nestedJars">
		<mkdir dir="${buildDirectory}/nestedJars/org.eclipse.equinox.registry_3.5.301.v20130717-1549"/>
		<unzip src="${eclipsePlugins}/org.eclipse.equinox.registry_3.5.301.v20130717-1549.jar" dest="${buildDirectory}/nestedJars/org.eclipse.equinox.registry_3.5.301.v20130717-1549" overwrite="false">
			<patternset includes="runtime_registry_compatibility.jar"/>
		</unzip>
		<mkdir dir="${buildDirectory}/nestedJars/org.eclipse.ui.workbench_3.105.1.v20130821-1411"/>
		<unzip src="${eclipsePlugins}/org.eclipse.ui.workbench_3.105.1.v20130821-1411.jar" dest="${buildDirectory}/nestedJars/org.eclipse.ui.workbench_3.105.1.v20130821-1411" overwrite="false">
			<patternset includes="e4-workbench.jar"/>
		</unzip>
		<mkdir dir="${buildDirectory}/nestedJars/org.eclipse.ui.workbench_3.105.1.v20130821-1411"/>
		<unzip src="${eclipsePlugins}/org.eclipse.ui.workbench_3.105.1.v20130821-1411.jar" dest="${buildDirectory}/nestedJars/org.eclipse.ui.workbench_3.105.1.v20130821-1411" overwrite="false">
			<patternset includes="compatibility.jar"/>
		</unzip>
		<mkdir dir="${buildDirectory}/nestedJars/com.ibm.icu_50.1.1.v201304230130"/>
		<unzip src="${eclipsePlugins}/com.ibm.icu_50.1.1.v201304230130.jar" dest="${buildDirectory}/nestedJars/com.ibm.icu_50.1.1.v201304230130" overwrite="false">
			<patternset includes="icu-data.jar"/>
		</unzip>
		<mkdir dir="${buildDirectory}/nestedJars/org.eclipse.e4.core.services_1.1.0.v20130515-1343"/>
		<unzip src="${eclipsePlugins}/org.eclipse.e4.core.services_1.1.0.v20130515-1343.jar" dest="${buildDirectory}/nestedJars/org.eclipse.e4.core.services_1.1.0.v20130515-1343" overwrite="false">
			<patternset includes="injection_annotations.jar"/>
		</unzip>
		<mkdir dir="${buildDirectory}/nestedJars/org.eclipse.ui.ide_3.9.1.v20130704-1828"/>
		<unzip src="${eclipsePlugins}/org.eclipse.ui.ide_3.9.1.v20130704-1828.jar" dest="${buildDirectory}/nestedJars/org.eclipse.ui.ide_3.9.1.v20130704-1828" overwrite="false">
			<patternset includes="e4-ide.jar"/>
		</unzip>
		<mkdir dir="${buildDirectory}/nestedJars/org.eclipse.ui.win32_3.2.400.v20130516-1056"/>
		<unzip src="${eclipsePlugins}/org.eclipse.ui.win32_3.2.400.v20130516-1056.jar" dest="${buildDirectory}/nestedJars/org.eclipse.ui.win32_3.2.400.v20130516-1056" overwrite="false">
			<patternset includes="e4-ide.jar"/>
		</unzip>
	</target>
	<target name="@dot.init" depends="init" description="Init @dot.">
		<path id="@dot.classpath">
			<pathelement path="${eclipsePlugins}/org.eclipse.ui_3.105.0.v20130522-1122.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.runtime_3.9.0.v20130326-1255.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.osgi_3.9.1.v20130814-1242.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.common_3.6.200.v20130402-1505.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.jobs_3.5.300.v20130429-1813.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.runtime.compatibility.registry_3.5.200.v20130514-1256/runtime_registry_compatibility.jar"/>			
			<pathelement path="${eclipsePlugins}/org.eclipse.core.runtime.compatibility.registry_3.5.200.v20130514-1256"/>
			
			<pathelement path="${buildDirectory}/nestedJars/org.eclipse.equinox.registry_3.5.301.v20130717-1549/runtime_registry_compatibility.jar"/>
			
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.registry_3.5.301.v20130717-1549.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.preferences_3.5.100.v20130422-1538.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.contenttype_3.4.200.v20130326-1255.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.runtime.compatibility.auth_3.2.300.v20120523-2004.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.app_1.3.100.v20130327-1442.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.osgi.services_3.3.100.v20130513-1956.jar"/>
			<pathelement path="${eclipsePlugins}/javax.servlet_3.0.0.v201112011016.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.swt_3.102.1.v20130827-2021.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.swt.win32.win32.x86_64_3.102.1.v20130827-2048.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.jface_3.9.1.v20130725-1141.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.commands_3.6.100.v20130515-1857.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.bidi_0.10.0.v20130327-1442.jar"/>
			
			<pathelement path="${buildDirectory}/nestedJars/org.eclipse.ui.workbench_3.105.1.v20130821-1411/e4-workbench.jar"/>
			<pathelement path="${buildDirectory}/nestedJars/org.eclipse.ui.workbench_3.105.1.v20130821-1411/compatibility.jar"/>
			
			<pathelement path="${eclipsePlugins}/org.eclipse.ui.workbench_3.105.1.v20130821-1411.jar"/>
			
			<pathelement path="${buildDirectory}/nestedJars/com.ibm.icu_50.1.1.v201304230130/icu-data.jar"/>
			
			<pathelement path="${eclipsePlugins}/com.ibm.icu_50.1.1.v201304230130.jar"/>
			<pathelement path="${eclipsePlugins}/javax.annotation_1.1.0.v201209060031.jar"/>
			<pathelement path="${eclipsePlugins}/javax.inject_1.0.0.v20091030.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.core.commands_0.10.2.v20130515-1857.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.expressions_3.4.500.v20130515-1343.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.core.contexts_1.3.1.v20130905-0905.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.core.di_1.3.0.v20130514-1256.jar"/>
			
			<pathelement path="${buildDirectory}/nestedJars/org.eclipse.e4.core.services_1.1.0.v20130515-1343/injection_annotations.jar"/>
			
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.core.services_1.1.0.v20130515-1343.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.ui.workbench_1.0.1.v20130910-2014.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.ui.model.workbench_1.0.1.v20130909-1436.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.emf.ecore_2.9.1.v20130827-0309.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.emf.common_2.9.1.v20130827-0309.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.resources_3.8.101.v20130717-0806.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.resources.win32.x86_64_3.5.0.v20121203-0906.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.ant.core_3.2.500.v20130402-1746.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.variables_3.2.700.v20130402-1741.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.filesystem_1.4.0.v20130514-1240.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.filesystem.win32.x86_64_1.4.0.v20121112-1357.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.ui.services_1.0.1.v20130909-1436.jar"/>
			<pathelement path="${eclipsePlugins}/javax.xml_1.3.4.v201005080400.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.ui.di_1.0.0.v20130515-1857.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.core.di.extensions_0.11.100.v20130514-1256.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.emf.ecore.change_2.9.0.v20130827-0309.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.emf.ecore.xmi_2.9.1.v20130827-0309.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.ui.workbench.renderers.swt_0.11.1.v20130812-1345.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.ui.workbench.swt_0.12.1.v20130815-1438.jar"/>
			<pathelement path="${eclipsePlugins}/org.apache.batik.css_1.6.0.v201011041432.jar"/>
			<pathelement path="${eclipsePlugins}/org.apache.batik.util_1.6.0.v201011041432.jar"/>
			<pathelement path="${eclipsePlugins}/org.apache.batik.util.gui_1.6.0.v201011041432.jar"/>
			<pathelement path="${eclipsePlugins}/org.w3c.css.sac_1.3.1.v200903091627.jar"/>
			<pathelement path="${eclipsePlugins}/org.w3c.dom.svg_1.1.0.v201011041433.jar"/>
			<pathelement path="${eclipsePlugins}/org.w3c.dom.smil_1.0.0.v200806040011.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.databinding_1.4.1.v20130515-1857.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.databinding.observable_1.4.1.v20130515-1857.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.databinding.property_1.4.200.v20130515-1857.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.jface.databinding_1.6.200.v20130515-1857.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.ui.css.core_0.10.100.v20130515-1857.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.ui.css.swt_0.11.0.v20130515-1857.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.ui.bindings_0.10.101.v20130801-2002.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.ui.workbench3_0.12.0.v20130515-1857.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.ui.css.swt.theme_0.9.100.v20130515-1857.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.ui.widgets_1.0.0.v20130515-1857.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.ds_1.4.101.v20130813-1853.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.util_1.0.500.v20130404-1337.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.event_1.3.0.v20130327-1442.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.help_3.6.0.v20130326-1254.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.e4.ui.workbench.addons.swt_1.0.1.v20130823-1518.jar"/>
			
			<pathelement path="${buildDirectory}/nestedJars/org.eclipse.ui.ide_3.9.1.v20130704-1828/e4-ide.jar"/>
			
			<pathelement path="${eclipsePlugins}/org.eclipse.ui.ide_3.9.1.v20130704-1828.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.ui.win32_3.2.400.v20130516-1056.jar"/>
			
			<pathelement path="${buildDirectory}/nestedJars/org.eclipse.ui.win32_3.2.400.v20130516-1056/e4-ide.jar"/>
			
			<pathelement path="${eclipsePlugins}/org.eclipse.ui.views_3.6.100.v20130326-1250.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.jface.text_3.8.101.v20130802-1147.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.text_3.5.300.v20130515-1451.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.ui.forms_3.6.1.v20130822-1117.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.p2.engine_2.3.0.v20130526-2122.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.p2.core_2.3.0.v20130327-2119.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.p2.metadata_2.2.0.v20130523-1557.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.p2.metadata.repository_1.2.100.v20130327-2119.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.p2.repository_2.3.0.v20130412-2032.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.security_1.2.0.v20130424-1801.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.equinox.security.win32.x86_64_1.0.100.v20130327-1442.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.ui.navigator_3.5.300.v20130517-0139.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.ui.navigator.resources_3.4.500.v20130516-1049.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.ui.views.properties.tabbed_3.6.0.v20130515-1857.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.ui.workbench.texteditor_3.8.101.v20130729-1318.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.compare.core_3.5.300.v20130514-1224.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.ltk.core.refactoring_3.6.100.v20130605-1748.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.filebuffers_3.5.300.v20130225-1821.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.ltk.ui.refactoring_3.7.100.v20130605-1748.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.compare_3.5.401.v20130709-1308.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.ui.editors_3.8.100.v20130513-1637.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.team.core_3.7.0.v20130514-1224.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.team.ui_3.7.1.v20130729-1104.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.jdt.core_3.9.1.v20130905-0837.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.jdt.compiler.apt_1.0.600.v20130530-1010.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.jdt.compiler.tool_1.0.200.v20130530-1010.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.jdt.launching_3.7.0.v20130515-1451.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.debug.core_3.8.0.v20130514-0954.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.jdt.debug_3.8.0.v20130514-0841/jdi.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.jdt.debug_3.8.0.v20130514-0841/jdimodel.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.jdt.debug_3.8.0.v20130514-0841/tools.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.jdt.ui_3.9.1.v20130820-1427.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.search_3.9.0.v20130312-1625.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.debug.ui_3.9.0.v20130516-1713.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.ui.console_3.5.200.v20130514-0954.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.jdt.core.manipulation_1.5.0.v20130605-1748.jar"/>
			<pathelement path="${eclipsePlugins}/org.eclipse.core.net_1.2.200.v20130430-1352.jar"/>
			
			<pathelement path="${SAFSJARS}/seleniumplus.jar"/>
			
			<pathelement path="${build.result.folder}/../Seleniumplus_plugin_1.0.0.201312102336/external"/>
		</path>
	</target>
	<target name="@dot" depends="init,@dot.nestedJars,@dot.init" unless="@dot" description="Create jar: Seleniumplus_plugin @dot.">
		<delete dir="${build.result.folder}/@dot"/>
		<mkdir dir="${build.result.folder}/@dot"/>
		<!-- compile the source code -->
		<javac destdir="${build.result.folder}/@dot" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" source="${bundleJavacSource}" target="${bundleJavacTarget}"		>
			<compilerarg line="${compilerArg}" compiler="${build.compiler}"/>
			<classpath refid="@dot.classpath" />
			<src path="src/"			/>
			<compilerarg value="@${basedir}/javaCompiler...args" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"			/>
			<compilerarg line="-log &apos;${build.result.folder}/@dot${logExtension}&apos;" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"			/>
		</javac>
		<antcall target="checkCompilationResults"/>
		<!-- Copy necessary resources -->
		<copy todir="${build.result.folder}/@dot" failonerror="true" overwrite="false">
			<fileset dir="src/">
				<exclude name="**/*.java"/>
				<exclude name="**/package.htm*"/>
			</fileset>
		</copy>
	</target>

	<target name="src.zip" depends="init" unless="src.zip">
		<mkdir dir="${build.result.folder}"/>
		<antcall target="zip.src.zip"/>
	</target>
	<target name="zip.src.zip">
		<zip destfile="${build.result.folder}/src.zip" filesonly="false" whenempty="skip" update="false">
			<fileset dir="src/">
				<include name="**/*.java"/>
			</fileset>
		</zip>
	</target>
	<target name="copy.src.zip">
		<copy todir="${source.destination.folder}/" failonerror="true" overwrite="true">
			<fileset dir="src/">
				<include name="**/*.java"/>
			</fileset>
		</copy>
	</target>

	<target name="build.jars.and.test" depends="build.jars, test" />

	<target name="build.jars" depends="init, clean" description="Compile classes and build nested jars for the plug-in: Seleniumplus_plugin.">
		<delete file="${compilation.problem.marker}" quiet="true"/>
		<available property="@dot" file="${build.result.folder}/@dot"/>
		<antcall target="@dot"/>
	</target>

	<target name="init.groovy">
		<path id="groovy.classpath">
			<fileset dir="${SAFSJARS}/../libs/groovy">
				<include name="groovy*.jar" />
			</fileset>
		</path>
		<property name="groovy.classpath" refid="groovy.classpath" />

		<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpath="${groovy.classpath}" />
	</target>

	<target name="test.classpath" depends="init.groovy,@dot.init">
		<groovy>
			ant.path(id:"test.classpath") {
				// this project's compiled classes
				pathelement(location:'${build.result.folder}/@dot')

				// test jars - see the README.txt in test/lib.
				fileset(dir:'test/lib') {
					include(name:'*.jar')
				}
				path(refid:'@dot.classpath')
				path(refid:'groovy.classpath')

				// junit from the Eclipse jars is used just because it is available.
				pathelement(path:'${eclipsePlugins}/org.junit_4.11.0.v201303080030/junit.jar')
				// junit depends on hamcrest
				pathelement(path:'${eclipsePlugins}/org.hamcrest.core_1.3.0.v201303031735.jar')
			}
			ant.property(name:'test.classpath', refid:'test.classpath')
		</groovy>
	</target>

	<!--
	All of this project's code is compiled.

	This target can be run with Ant as opposed to the Eclipse AntRunner application.
	-->
	<target name="test.compile" depends="@dot,test.compile.only"/>

	<!--
	Only the test code is compiled.
	This target can be run with Ant as opposed to the Eclipse AntRunner application.
	-->
	<target name="test.compile.only" depends="init.groovy,test.classpath">
		<groovy>
			ant.mkdir(dir:'${testClassesDir}')
			ant.typedef(name:'groovyc', classname:'org.codehaus.groovy.ant.Groovyc', classpath:'${test.classpath}')
			ant.groovyc(
				srcdir:'test/groovy',
				destdir:'${testClassesDir}',
				classpath:'${test.classpath}',
			) {
				javac(debug:'on')
			}
		</groovy>
	</target>

	<!--
	This project's code is compiled, and the tests are run.
	This target can be run with Ant as opposed to the Eclipse AntRunner application.
	-->
	<target name="test" depends="test.compile, test.only" />

	<!--
	Assumes a build of the non-test code has been done.
	This target only compiles and runs the tests.

	This target can be run with Ant as opposed to the Eclipse AntRunner application.
	-->
	<target name="test.compile.and.run.only" depends="test.compile.only, test.only" />

	<!--
	Assumes a build of the code has been done.  This target only runs the tests.
	This target can be run with Ant as opposed to the Eclipse AntRunner application.
	-->
	<target name="test.only" depends="test.classpath">
		<groovy>
			ant.property(name:'SELENIUM_PLUS', location:'${SAFSJARS}/../dist')
			ant.echo(message:'SELENIUM_PLUS=${SELENIUM_PLUS}')

			// Create the runtime classpath.
			ant.path(id:"test.runtime.classpath") {
				// this project's compiled classes
				pathelement(location:'${build.result.folder}/@dot')

				// test jars - see the README.txt in test/lib.
				fileset(dir:'test/lib') {
					include(name:'*.jar')
				}

				// Now add some jars from dist.  This requires the
				// SAFS build to run first.

				// the seleniumplus.jar has to be on the classpath like this
				// for the code to recognize it as SeleniumPlus product.
				// Otherwise, the selenium server will not be started correctly.
				pathelement(path:'${SELENIUM_PLUS}/libs/seleniumplus.jar')

				fileset(dir:'${SELENIUM_PLUS}/libs') {
					include(name:'*.jar')
				}
				pathelement(path:'${test.classpath}')
			}
			ant.property(name:'test.runtime.classpath', refid:'test.runtime.classpath')

			// Clean the report directories.
			ant.delete(dir:'${testBuildDirectory}/reports/xml', failonerror:false)
			ant.delete(dir:'${testBuildDirectory}/reports/html', failonerror:false)
			ant.mkdir(dir:'${testBuildDirectory}/reports/xml')

			// Run the tests.
			def debugPort = properties.'test.debug.port'  // set to non-zero to attach to a debugger.
			ant.property(name:'test.timeout', value:'300000') // 5 min default

			ant.junit(
				failureProperty:"tests-failed",
				fork:true,
				printsummary:true,
				timeout:'${test.timeout}',
				dir:'${basedir}',
			) {
				classpath {
					path(refid:"test.runtime.classpath")
					pathelement(location:'${testClassesDir}')
				}
				env(key:'SELENIUM_PLUS', value:'${SELENIUM_PLUS}')
				if (debugPort) {
					jvmarg(value:"-Xdebug")
					jvmarg(value:"-Xrunjdwp:transport=dt_socket,address=$debugPort,suspend=y,server=y")
				}
				formatter(type:"xml")
				batchtest(todir:'${testBuildDirectory}/reports/xml') {
					fileset(dir:'${testClassesDir}') {
						include(name:"**/*.class")
						exclude(name:'**/*$$*.class')
						exclude(name:'**/EclipseMock.class')
						exclude(name:'**/LogFileUtil.class')
						exclude(name:'**/SeleniumPlusTestUtil.class')
						exclude(name:'**/TestUtil.class')
					}
				}
			}
			// run the junit report
			ant.mkdir(dir:'${testBuildDirectory}/reports/html')
			ant.junitreport(todir:'${testBuildDirectory}/reports/html') {
				fileset(dir:'${testBuildDirectory}/reports/xml') {
					include(name:'TEST-*.xml')
				}
				report(format:'frames', todir:'${testBuildDirectory}/reports/html')
			}
			// if there were test failures, fail the build.
			if (properties.'tests-failed') {
				ant.fail(message:'One or more tests have failed.  See ${testBuildDirectory}/reports/html/index.html for details.')
			}
		</groovy>
	</target>

	<target name="checkCompilationResults" if="compilation.error.occured">
		<echo file="${compilation.problem.marker}" message="Seleniumplus_plugin_1.0.0.201312102336${line.separator}compilation.error.occured=${compilation.error.occured}"/>
		<eclipse.logCompileError bundle="Seleniumplus_plugin_1.0.0.201312102336" log="${compilation.prereq.log}">
		</eclipse.logCompileError>
	</target>

	<target name="build.sources" depends="init">
		<available property="src.zip" file="${build.result.folder}/src.zip"/>
		<antcall target="src.zip"/>
	</target>

	<target name="publish.bin.parts" depends="init" if="p2.publish.parts" unless="compilation.problem.marker.exists">
		<mkdir dir="${build.result.folder}/Seleniumplus_plugin_1.0.0.201312102336"/>
		<copy todir="${build.result.folder}" failonerror="true" overwrite="true">
			<fileset dir="${basedir}">
				<include name="META-INF/MANIFEST.MF"/>
				<include name="plugin.xml"/>
				<include name="fragment.xml"/>
			</fileset>
		</copy>
		<eclipse.versionReplacer path="${build.result.folder}" version="1.0.0.201312102336"/>
		<antcall target="apitools.generation">
			<param name="target.folder" value="${build.result.folder}"/>
			<param name="projectLocation" value="${basedir}"/>
			<param name="binary.folders" value="${build.result.folder}/@dot"/>
			<param name="projectName" value="${bundleId}_${bundleVersion}"/>
		</antcall>
		<eclipse.gatherBundle 
		   metadataRepository="${p2.build.repo}"
		   artifactRepository="${p2.build.repo}"
		   buildResultFolder="${build.result.folder}"
		   baseDirectory="${basedir}"
		/>
	</target>

	<target name="gather.bin.parts" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/Seleniumplus_plugin_1.0.0.201312102336"/>
		<copy todir="${destination.temp.folder}/Seleniumplus_plugin_1.0.0.201312102336" failonerror="true" overwrite="false">
			<fileset dir="${build.result.folder}/@dot">
				<include name="**"/>
			</fileset>
		</copy>
		<copy todir="${destination.temp.folder}/Seleniumplus_plugin_1.0.0.201312102336" failonerror="true" overwrite="true">
			<fileset dir="${basedir}">
				<include name="META-INF/"/>
				<include name="plugin.xml"/>
				<include name="icons/"/>
				<include name="samples/"/>
				<!-- include name="bin/"/ -->
			</fileset>
			<fileset dir="${basedir}" includes="preferences.properties"/>
		</copy>
		<eclipse.versionReplacer path="${destination.temp.folder}/Seleniumplus_plugin_1.0.0.201312102336" version="1.0.0.201312102336"/>
		<antcall target="apitools.generation">
			<param name="target.folder" value="${destination.temp.folder}/Seleniumplus_plugin_1.0.0.201312102336"/>
			<param name="projectLocation" value="${basedir}"/>
			<param name="binary.folders" value="${build.result.folder}/@dot"/>
			<param name="projectName" value="${bundleId}_${bundleVersion}"/>
		</antcall>
	</target>

	<target name="build.zips" depends="init">
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/Seleniumplus_plugin_1.0.0.201312102336"/>
		<copy file="${build.result.folder}/src.zip" todir="${destination.temp.folder}/Seleniumplus_plugin_1.0.0.201312102336" failonerror="false" overwrite="false"/>
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}/Seleniumplus_plugin_1.0.0.201312102336"/>
		</antcall>
	</target>

	<target name="gather.individual.sources" depends="init">
		<antcall target="copy.src.zip">
			<param name="source.destination.folder" value="${destination.temp.folder}"/>
		</antcall>
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}"/>
		</antcall>
	</target>

	<target name="copy.src.includes" depends="init">
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/Seleniumplus_plugin_1.0.0.201312102336"/>
		<copy todir="${destination.temp.folder}/Seleniumplus_plugin_1.0.0.201312102336" failonerror="false" overwrite="false">
			<fileset dir="${build.result.folder}">
				<include name="@dot${logExtension}"/>
			</fileset>
		</copy>
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: Seleniumplus_plugin of all the zips, jars and logs created.">
		<delete dir="${build.result.folder}/@dot"/>
		<delete file="${build.result.folder}/src.zip"/>
		<delete dir="${testBuildDirectory}" failonerror="false"/>
		<delete file="${plugin.destination}/Seleniumplus_plugin_1.0.0.201312102336.jar"/>
		<delete file="${plugin.destination}/Seleniumplus_plugin_1.0.0.201312102336.zip"/>
		<delete dir="${temp.folder}"/>
		<delete file="${compilation.problem.marker}" quiet="true"/>
	</target>

	<target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
		<eclipse.convertPath fileSystemPath="C:/safsdev/source/common/eclipse/plugins/Seleniumplus_plugin" property="resourcePath"/>
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: Seleniumplus_plugin.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="build.sources"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<delete>
			<fileset dir="${temp.folder}">
				<include name="**/*.bin${logExtension}"/>
			</fileset>
		</delete>
		<zip destfile="${plugin.destination}/Seleniumplus_plugin_1.0.0.201312102336.zip" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="apitools.generation" if="generateAPIDescription">
		<apitooling.apigeneration  projectName="${projectName}" project="${projectLocation}" binary="${binary.folders}" target="${target.folder}" extramanifests="${extraManifests}" allownonapiproject="${allowNonApiProject}"		/>
	</target>

</project>
